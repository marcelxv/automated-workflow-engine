name: CI

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.json'
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.json'
  workflow_dispatch:

jobs:
  validate-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup environment
        id: setup
        run: |
          # Install required tools for local testing
          if [ "$RUNNER_OS" = "Linux" ]; then
            if command -v apt-get &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y git curl jq
            elif command -v apk &> /dev/null; then
              apk add --no-cache git curl jq
            fi
          fi
          echo "::set-output name=setup_complete::true"

      - name: Setup Node.js
        if: steps.setup.outputs.setup_complete == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        if: steps.setup.outputs.setup_complete == 'true'
        run: |
          npm init -y
          npm install ajv ajv-formats glob
          echo "VALIDATION_STATUS=pending" >> $GITHUB_ENV

      - name: List Files (Debug)
        if: steps.setup.outputs.setup_complete == 'true'
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Scripts directory contents:"
          ls -la scripts || echo "Scripts directory not found"
          echo "Workflows directory contents:"
          ls -la workflows || echo "Workflows directory not found"

      - name: Manual File Detection
        id: manual-files
        if: steps.setup.outputs.setup_complete == 'true'
        run: |
          CHANGED_FILES=$(find workflows -name "*.json" -not -name "*package*.json" || echo "")
          if [ -z "$CHANGED_FILES" ]; then
            echo "No JSON files found to process"
            echo "::set-output name=has_files::false"
          else
            echo "Found files to process:"
            echo "$CHANGED_FILES"
            echo "::set-output name=has_files::true"
            echo "::set-output name=files::$CHANGED_FILES"
          fi

      - name: Run Workflow Validation
        if: steps.manual-files.outputs.has_files == 'true'
        run: |
          if [ -f "scripts/validate-workflows.js" ]; then
            echo "Running workflow validation..."
            if node scripts/validate-workflows.js ./workflows; then
              echo "VALIDATION_STATUS=success" >> $GITHUB_ENV
            else
              echo "VALIDATION_STATUS=failure" >> $GITHUB_ENV
              if [ "$GITHUB_ACTIONS" != "true" ]; then
                echo "Local validation failed but continuing for testing"
              fi
            fi
          else
            echo "Validation script not found"
            if [ "$GITHUB_ACTIONS" != "true" ]; then
              echo "VALIDATION_STATUS=success" >> $GITHUB_ENV
              echo "Local testing: Skipping validation"
            else
              echo "VALIDATION_STATUS=failure" >> $GITHUB_ENV
            fi
          fi

      - name: Mock Deploy for Local Testing
        if: env.ACT && env.VALIDATION_STATUS != 'failure'
        run: |
          echo "üöÄ Local testing - Mock deployment"
          for file in ${{ steps.manual-files.outputs.files }}; do
            if [[ $file == *_schema.json ]]; then
              echo "Would deploy schema: $file"
              jq '.' "$file" || echo "Invalid JSON in $file"
            elif [[ ! $file =~ (_schema|_payload)\.json$ ]]; then
              echo "Would deploy workflow: $file"
              jq '.' "$file" || echo "Invalid JSON in $file"
            fi
          done
          echo "DEPLOY_STATUS=success" >> $GITHUB_ENV

      - name: Report Status
        if: always()
        run: |
          if [ "$GITHUB_ACTIONS" != "true" ]; then
            echo "Local testing status:"
            echo "Validation: $VALIDATION_STATUS"
            echo "Deployment: ${DEPLOY_STATUS:-not_run}"
            if [ "$VALIDATION_STATUS" = "success" ]; then
              echo "‚úÖ Local testing completed successfully"
              exit 0
            else
              echo "‚ùå Local testing encountered issues"
              exit 1
            fi
          else
            if [ "$VALIDATION_STATUS" = "success" ]; then
              echo "‚úÖ CI workflow completed successfully"
              exit 0
            else
              echo "‚ùå CI workflow failed"
              exit 1
            fi
          fi