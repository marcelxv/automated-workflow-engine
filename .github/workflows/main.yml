name: CI

on:
  push:
    branches: [ main ]
    paths:
      - 'workflows/**/*.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'workflows/**/*.json'
  workflow_dispatch:

jobs:
  deploy-workflows:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Dependencies
      run: |
        npm install ajv ajv-formats glob --no-package-lock

    - name: Run Validation
      id: validate
      run: |
        if node scripts/validate-workflows.js ./workflows; then
          if [[ $(node scripts/validate-workflows.js ./workflows 2>&1 | grep -c "Warning") -gt 0 ]]; then
            echo "VALIDATION_STATUS=warning" >> $GITHUB_ENV
            echo "status=warning" >> $GITHUB_OUTPUT
          else
            echo "VALIDATION_STATUS=success" >> $GITHUB_ENV
            echo "status=success" >> $GITHUB_OUTPUT
          fi
        else
          echo "VALIDATION_STATUS=failure" >> $GITHUB_ENV
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Check Schema Naming
      if: env.VALIDATION_STATUS != 'failure'
      run: |
        echo "Checking schema naming convention..."
        INVALID_SCHEMAS=0
        for schema in workflows/**/*_schema.json; do
          if [ -f "$schema" ]; then
            WORKFLOW_NAME=$(basename "$schema" _schema.json)
            EXPECTED_NAME="${WORKFLOW_NAME}_input"
            ACTUAL_NAME=$(jq -r '.name' "$schema")
            if [ "$ACTUAL_NAME" != "$EXPECTED_NAME" ]; then
              echo "❌ Schema naming error in $schema: expected '$EXPECTED_NAME', got '$ACTUAL_NAME'"
              INVALID_SCHEMAS=$((INVALID_SCHEMAS + 1))
            fi
          fi
        done
        if [ $INVALID_SCHEMAS -gt 0 ]; then
          echo "Found $INVALID_SCHEMAS schemas with incorrect naming"
          exit 1
        fi

    - name: Authenticate with Orkes
      id: auth
      if: success()
      uses: fjogeleit/http-request-action@v1.9.1
      with:
        url: 'https://foodready-prod.orkesconductor.io/api/token'
        method: 'POST'
        contentType: 'application/json'
        data: |
          {
            "keyId": "${{ secrets.ORKES_REPO_KEY }}",
            "keySecret": "${{ secrets.ORKES_REPO_SECRET }}"
          }
        preventFailureOnNoResponse: 'false'

    - name: Verify Authentication
      id: verify_auth
      if: success()
      run: |
        RESPONSE='${{ steps.auth.outputs.response }}'
        if [ -z "$RESPONSE" ]; then
          echo "❌ Authentication failed: Empty response"
          exit 1
        fi
        
        TOKEN=$(echo "$RESPONSE" | jq -r '.token')
        if [ "$TOKEN" = "null" ] || [ -z "$TOKEN" ]; then
          echo "❌ Authentication failed: Invalid token"
          exit 1
        fi
        
        echo "token=$TOKEN" >> $GITHUB_OUTPUT
        echo "✅ Authentication successful"

    - name: Deploy Schemas
      if: success() && steps.verify_auth.outputs.token != ''
      run: |
        for schema in workflows/**/*_schema.json; do
          echo "Deploying schema: $schema"
          RESPONSE=$(curl -X PUT \
            -H "Content-Type: application/json" \
            -H "X-Authorization: ${{ steps.verify_auth.outputs.token }}" \
            -d @"$schema" \
            -w "\n%{http_code}" \
            "https://foodready-prod.orkesconductor.io/api/metadata/workflow/schema")
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          CONTENT=$(echo "$RESPONSE" | sed '$d')
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ Failed to deploy schema $schema. Status: $HTTP_CODE"
            echo "Response: $CONTENT"
            exit 1
          fi
        done

    - name: Deploy Workflows
      if: success() && steps.verify_auth.outputs.token != ''
      run: |
        for workflow in workflows/**/*.json; do
          if [[ ! "$workflow" =~ (_schema|_payload).json$ ]]; then
            echo "Deploying workflow: $workflow"
            RESPONSE=$(curl -X PUT \
              -H "Content-Type: application/json" \
              -H "X-Authorization: ${{ steps.verify_auth.outputs.token }}" \
              -d @"$workflow" \
              -w "\n%{http_code}" \
              "https://foodready-prod.orkesconductor.io/api/metadata/workflow")
            
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            CONTENT=$(echo "$RESPONSE" | sed '$d')
            
            if [ "$HTTP_CODE" != "200" ]; then
              echo "❌ Failed to deploy workflow $workflow. Status: $HTTP_CODE"
              echo "Response: $CONTENT"
              exit 1
            fi
          fi
        done

    - name: Report Status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Workflow execution completed successfully:"
          echo "  - Validation: ${{ env.VALIDATION_STATUS }}"
          echo "  - Schema Naming: Passed"
          echo "  - Authentication: Successful"
          echo "  - Deployment: Completed"
        else
          echo "❌ Workflow execution failed:"
          echo "  - Validation: ${{ env.VALIDATION_STATUS }}"
          [ "${{ steps.verify_auth.outcome }}" != "success" ] && echo "  - Authentication: Failed"
          exit 1
        fi